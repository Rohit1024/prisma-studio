steps:
  # Step 1: Install Node.js dependencies (including Prisma CLI)
  - name: 'gcr.io/cloud-builders/npm'
    args: ['install']
    id: 'InstallDependencies'
    volumes:
      - name: 'node_modules'
        path: /app/node_module

  # Step 2: Generate Prisma Client and Run Migrations in one step
  - name: 'gcr.io/cloud-builders/npm'
    id: 'PrismaOperations'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Construct the DATABASE_URL using secrets and environment variables/substitutions
        export DATABASE_URL="${_DB_PROVIDER}://${_DB_USER}:$$DB_PASSWORD@${_CLOUD_SQL_PRIVATE_IP}:${_DB_PORT}/${_DB_NAME}?schema=public"

        # Verify connection string format (optional, for debugging)
        echo "Using DATABASE_URL (password hidden): ${_DB_PROVIDER}://${_DB_USER}:***@${_CLOUD_SQL_PRIVATE_IP}:${_DB_PORT}/${_DB_NAME}?schema=public"
        
        # Generate Prisma Client
        npx prisma generate
        
        # Create migrations if they don't exist
        npx prisma migrate dev --name initial-migration --create-only
        
        # Apply migrations
        npx prisma migrate deploy
        
        # Run the database seed command (Executes script defined in package.json prisma.seed)
        echo "Running database seed..."
        npx prisma db seed

        echo "Prisma operations and seeding completed successfully."
    secretEnv: ['DB_PASSWORD']
    waitFor: ['InstallDependencies']
    volumes:
      - name: 'node_modules'
        path: /app/node_modules

  # Step 3: Get the cached image
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: ['-c', 'docker pull gcr.io/${PROJECT_ID}/prisma-studio:latest || exit 0']
  # Step 4; Build the Docker image for Prisma Studio
  - name: 'gcr.io/cloud-builders/docker'
    id: 'BuildImage'
    args: ['build', '-t', 'gcr.io/${PROJECT_ID}/prisma-studio:latest', '--cache-from', 'gcr.io/${PROJECT_ID}/prisma-studio:latest', '.']
    waitFor: ['PrismaOperations']

  # Step 5: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'PushImage'
    args: ['push', 'gcr.io/${PROJECT_ID}/prisma-studio:latest']
    waitFor: ['BuildImage']

  # Step 6: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'DeployToCloudRun'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud run deploy prisma-studio \
        --image=gcr.io/${PROJECT_ID}/prisma-studio:latest \
        --region=${_REGION} \
        --platform=managed \
        --allow-unauthenticated \
        --cpu=1 \
        --memory=512Mi \
        --min-instances=0 \
        --max-instances=1 \
        --set-env-vars="DATABASE_URL=${_DB_PROVIDER}://${_DB_USER}:$$DB_PASSWORD@${_CLOUD_SQL_PRIVATE_IP}:${_DB_PORT}/${_DB_NAME}?schema=public" \
        --network=${_NETWORK} \
        --subnet=${_SUBNET} \
        --vpc-egress=${_VPC_EGRESS}
    secretEnv: ['DB_PASSWORD']
    waitFor: ['PushImage']

images:
  - 'gcr.io/${PROJECT_ID}/prisma-studio:latest'

availableSecrets:
  secretManager:
    - versionName: projects/${PROJECT_ID}/secrets/postgres-password/versions/2
      env: 'DB_PASSWORD' 

# Specify the Private Worker Pool
options:
  pool:
    name: 'projects/${PROJECT_ID}/locations/$_REGION/workerPools/${_WORKER_POOL}'

# Define substitutions
substitutions:
  _DB_PROVIDER: postgresql
  _DB_USER: postgres
  _DB_NAME: prisma-studio
  _DB_PORT: "5432"
  _CLOUD_SQL_PRIVATE_IP: 10.24.34.3
  _REGION: us-central1
  _NETWORK: default
  _SUBNET: default
  _VPC_EGRESS: private-ranges-only
  _WORKER_POOL: just-pool
